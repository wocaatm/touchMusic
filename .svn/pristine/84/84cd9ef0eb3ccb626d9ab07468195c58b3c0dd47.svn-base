import { _random, $, offsetDistance, timeFormat } from './util.js'
import Lyric from './lyric'
import Api from '../api/index'

export default function (options) {
    //检测配置项参数
    if (!Array.isArray(options.musics)) {
        console.warn('请提供播放音频文件数组')
        return
    }

    if (!options.title) {
        options.title = '播放列表'
        return
    }

    for(var item in options.musics){
        if(!(options.musics[item].src && options.musics[item].name && options.musics[item].artist && options.musics[item].thumb)){
            console.error('请正确配置对象！');
            return;
        }
    }


    //初始化模板
    var target = options.container     //挂载点
    var htmlContent = `<div id="touch-player">
        <audio src="${options.musics[0].src}" preload="true"></audio>
        <div class='player-background-container'><div class="player-background"></div></div>
        <div class="player-music-container scroll-bar clearfix">
            <div class="music-image-container fl">
                <img class='music-image' src="${options.musics[0].thumb}" width="100%" height="100%">
            </div>
            <div class="music-info-container">
                <div class='music-content-container'>
                    <h3 class="music-info-title">${options.title}</h3>
                    <ul class="music-list-container scroll-bar">
                        ${options.musics.map((music, index) => `<li class="music-item clearfix" data-id=${music.id}>
                                <div class="music-icon fl">
                                    <span class="music-index">${index + 1}</span>
                                    <i class="icon-play fa fa-play"></i>
                                    <i class="icon-pause fa fa-pause"></i>
                                </div>
                                <p class="music-name single-ellipsis fl">${music.name}</p>
                                <span class="fr music-artist single-ellipsis">${music.artist}</span>
                            </li>`
                        ).join('')}
                    </ul>
                </div>
                <div class="music-lyric-contianer">
                    <div class="music-lyric-close"><i class="fa fa-close"></i></div>
                </div>
            </div>
        </div>
        <div class="player-controller-container">
            <div class="muic-thumb-container cursor__pointer">
                <img class='music-thumb' src="${options.musics[0].thumb}" alt="" width="60px" height="60px">
            </div>
            <div class="controller-container">
                <div class="backward cursor__pointer">
                    <i class="fa fa-fast-backward"></i>
                </div>
                <div class="music-play-flag cursor__pointer fl">
                    <i class="play-btn fa fa-play"></i>
                    <i class="pause-btn fa fa-pause hidden"></i>
                </div>
                <div class="forward cursor__pointer">
                    <i class="fa fa-fast-forward"></i>
                </div>
            </div>
            <div class="duration-container">
                <div class="currentTime">00:00</div>
                <div class="progress-container cursor__pointer">
                    <div class="loaded-progress"></div>
                    <div class="play-progress"></div>
                </div>
                <div class="duration">00:00</div>
            </div>
            <div class="opration-container">
                <div class="play-volume cursor__pointer">
                    <i class='volume-icon fa fa-volume-up'></i>
                    <div class="volume-container">
                        <div class='volume-switch-container'>
                            <div class="volume-precent"></div>
                        </div>
                    </div>
                </div>
                <div class="play-mode cursor__pointer" title="播放模式">
                    <i class="mode-type fa fa-bars" data-info='顺序播放' data-mode='1'></i>
                    <i class="mode-type hidden fa fa-random" data-info='随机播放' data-mode='2'></i>
                    <i class="mode-type hidden fa fa-refresh" data-info='单曲循环' data-mode='3'></i>
                </div>
                <div class="lyric cursor__pointer">
                    <i class="fa fa-file-o" title="歌词"></i>
                </div>
                <div class="switch cursor__pointer">
                    <i class="fa fa-exchange" title="切换选项"></i>
                </div>
            </div>
            <div class="play-mode-notify"></div>
        </div>
        <div class="player-compress-expand cursor__pointer">
            <i class="fa fa-compress fa-2x"></i>
        </div>
        <div class="shrink-controller hidden">
            <img class='controller-thumb paused' src=''>
        </div>
    </div>`

    target.innerHTML = htmlContent

    /* 获取各种Dom节点 */
    var player = $('#touch-player'),
        audio = $('audio', player),
        bgContainer = $('.player-background', player),
        musicContainer = $('.player-music-container', player),
        controllerContainer = $('.player-controller-container', player),
        shrinkSwitch = $('.player-compress-expand', player),
        shrinkSwitchIcon = $('.fa', shrinkSwitch),
        shrinkController = $('.shrink-controller', player),
        shrinkControllerIcon = $('.controller-thumb', shrinkController),

        musicImageCotainer = $('.music-image-container', musicContainer),
        musicImage = $('.music-image', musicContainer),
        musicItem = $('.music-item', musicContainer, true),
        musicInfoContainer = $('.music-info-container', musicContainer),
        musicLyric = $('.music-lyric-contianer', musicInfoContainer),
        musicLyricClose = $('.music-lyric-close', musicLyric),
        musicContent = $('.music-content-container', musicInfoContainer),

        musicThumb = $('.music-thumb', controllerContainer),
        backward = $('.backward', controllerContainer),
        offOnBtn = $('.music-play-flag', controllerContainer),
        pauseBtn = $('.pause-btn', offOnBtn),
        playBtn = $('.play-btn', offOnBtn),
        forward = $('.forward', controllerContainer),
        currentTime = $('.currentTime', controllerContainer),
        durationTime = $('.duration', controllerContainer),
        progressContainer = $('.progress-container', controllerContainer),
        progressPlay = $('.play-progress', progressContainer),
        progressLoaded = $('.loaded-progress', progressLoaded),
        playVolume = $('.play-volume', controllerContainer),
        switchIcon = $('.switch', controllerContainer),
        volumeSwitchContainer = $('.volume-switch-container', playVolume),
        volumeIcon = $('.volume-icon', playVolume),
        volumePrecent = $('.volume-precent', playVolume),
        modeItem = $('.mode-type', controllerContainer, true),
        notifyContainer = $('.play-mode-notify', controllerContainer),
        showLyric = $('.lyric', controllerContainer)


    var notifyTimeout,
        musicResourceLength = options.musics.length,
        currentPlayIndex = 0,       /* 全局依赖的播放列表的index */
        playModeFlag = 1,           /* 播放模式 */
        duration,                   /* 音频时长 */
        audioVolume,                /* 记录静音之后还原的音量 */
        initPlayerFlag = false,     /* 初始化播放器时间和音量 */
        reloadMusicTimeoutArr,      /* musicUrl 定时更新,定时器数组，SPA router离开的时候清除*/
        lastCurrentTime = -1,       /* 用于在单曲循环检audio 循环播放开始，重置歌词模块 */
        switchProgressBySelf = false,  /* 手动切换进度 */
        lyricMange = new Lyric(musicLyric)  /* 歌词管理器 */

    
    initMutual()

    handleEvent()

    /* 初始化播放器内部交互 */
    function initMutual () {
        bgContainer.style.backgroundImage = 'url('+ options.musics[0].thumb +')';

        shrinkControllerIcon.src = options.musics[0].thumb

        lyricMange.initLyricContainer(options.musics[currentPlayIndex].id)

        /* shrink 状态下的hover效果，播放器隐藏和显示 */
        player.addEventListener('mouseenter',function () {
            var classList = this.classList
            if (!classList.contains('shrink')) return
            classList.remove('translateX')
        })

        player.addEventListener('mouseleave',function () {
            var classList = this.classList
            if (!classList.contains('shrink')) return
            classList.add('translateX')
        })

        /* 经测试,网易云的mp3 url 23-25分钟更新一次 */
        var updateTime = 18 * 60 * 1000 - musicResourceLength * 3 * 1000;

        /* 音乐列表的交互，同时返回定时器修改music的url，定时器在SPA router离开要清除 */
        reloadMusicTimeoutArr = Array.from(musicItem).map(function (item, index) {
            var loopTime = updateTime + index * 3 * 1000
            var mid = item.getAttribute('data-id')

            /* 默认第一个播放 */
            if (index === currentPlayIndex) item.classList.add('current','currentPause')

            /* 音乐列表的hover效果 */
            item.addEventListener('mouseenter',function () {
                if (this.classList.contains('current')) return
                this.classList.add('currentPause')
            })

            item.addEventListener('mouseleave',function () {
                if (this.classList.contains('current')) return
                this.classList.remove('currentPause')
            })

            /* 点击切换播放 */
            item.addEventListener('click', switchMusic.bind(item, index))

            /* 定时更新url */
            return setInterval(function () {
                reloadMusicUrl(mid, index)
            }, loopTime)
        })

        /* 切换播放器样式shrink */
        shrinkSwitchIcon.addEventListener('click', function () {
            shrinkPlayer()
        })

        /* 歌词的显示*/
        showLyric.addEventListener('click', function () {
            showLyricFn()
        })

        /* 歌词的关闭 */
        musicLyricClose.addEventListener('click', function () {
            showLyricFn()
        })

        /* shrink状态下controller下面控制切换 */
        switchIcon.addEventListener('click', function () {
            controllerContainer.classList.toggle('exchange')
        })

        /* 修改播放模式，随机，循环，单一 */
        Array.from(modeItem).forEach(function (mode, index) {
            mode.addEventListener('click',function () {
                var modeEle = modeItem[0]
                this.classList.add('hidden')
                if (this.nextElementSibling) {
                    modeEle = this.nextElementSibling
                }
                modeEle.classList.remove('hidden')
                /* 模式修改悬浮提示 */
                if (notifyTimeout) {
                    clearTimeout(notifyTimeout)
                }

                notifyTimeout = setTimeout(function () {
                        notifyContainer.classList.remove('active')
                    }, 1000)

                notifyContainer.innerHTML = modeEle.getAttribute('data-info')
                /* 播放模式 */
                playModeFlag = parseInt(modeEle.getAttribute('data-mode'))

                if (playModeFlag === 3) {
                    audio.loop = true
                } else {
                    audio.loop = false
                }
                notifyContainer.classList.add('active')
            })
        })

        /* controller的事件绑定 */
        /* 播放暂停 */
        offOnBtn.addEventListener('click', musicOnOff)

        /* 播放进度切换 */
        progressContainer.addEventListener('click', switchProgress)

        /* 调音量 */
        volumeSwitchContainer.addEventListener('click', switchVolume)

        /* 静音或还原音量 */
        volumeIcon.addEventListener('click', switchVolume.bind(volumeIcon, true))

        /* 上一首 */
        backward.addEventListener('click', backwardMusic)

        /* 下一首 */
        forward.addEventListener('click', forwardMusic)
    }


    /* audio 对象回调函数 */
    function handleEvent () {
        audio.addEventListener('loadstart', loadStart)
        audio.addEventListener('durationchange', durationChange)
        audio.addEventListener('progress', loadProgress)
        audio.addEventListener('canplay', canPlayThrough)
        audio.addEventListener('timeupdate', timeUpdate)
        audio.addEventListener('ended', audioEnd)
    }


    /* 切换player shrink的内部操作 */
    function shrinkPlayer () {
        var shrinkIconClassList = shrinkSwitchIcon.classList,
            playerClassList = player.classList,
            musicClassList = musicContainer.classList,
            musicImageClassList = musicImageCotainer.classList,
            shrinkClassList = shrinkController.classList

        shrinkIconClassList.toggle('fa-compress')
        shrinkIconClassList.toggle('fa-expand')
        shrinkClassList.toggle('hidden')
        playerClassList.toggle('shrink')
        playerClassList.toggle('translateX')
        musicClassList.toggle('clearfix')
        musicImageClassList.toggle('fl')
    }

    /* 播放暂停音乐 */
    function musicOnOff () {
        if (audio.paused) {
            audio.play()
        } else {
            audio.pause()
        }
        musicsItemSwitch()
    }

    /* 更新播放按钮icon和音乐列表的icon */
    function musicsItemSwitch () {
        var pauseBtnClassList = pauseBtn.classList,
            playBtnClassList = playBtn.classList,
            shrinkClassList = shrinkControllerIcon.classList
        if (audio.paused) {
            pauseBtnClassList.add('hidden')
            playBtnClassList.remove('hidden')
            /* shrink状态下 40s动画暂停 */
            shrinkClassList.add('paused')
        } else {
            pauseBtnClassList.remove('hidden')
            playBtnClassList.add('hidden')
            shrinkClassList.remove('paused')
        }
        /* 切换music list的icon */
        Array.from(musicItem).forEach((item, index) => {
            var classList = item.classList
            if (classList.contains('current')) {
                classList.remove('current','currentPlay','currentPause')
            }
            if (index === currentPlayIndex) {
                classList.add('current')
                if (audio.paused) {
                    classList.add('currentPause')
                } else {
                    classList.add('currentPlay')
                }
            }
        })
    }

    /* 切换音乐操作 */
    function switchMusic (index) {
        if (!this.classList.contains('current')) {
            /* 让load条直接为0 */
            progressLoaded.classList.add('immediately')
            progressLoaded.style.width = 0
            /* 强制浏览器重新渲染 */
            var rf = progressLoaded.offsetWidth
            
            if (index !== undefined) {
                currentPlayIndex = index
            }
            switchMusicRelative()
            /* 重新渲染歌词组件 */
            lyricMange.initLyricContainer(options.musics[currentPlayIndex].id)
            /* callback给vue组件获取musicID 下的评论 */
            options.callback.audioSwitch(currentPlayIndex)
        }
        //on or off
        musicOnOff()
    }

    /* 加载进度条的transition效果 */
    function loadStart () {
        progressLoaded.classList.remove('immediately')
    }

    /* 歌曲时长变动, 切换音乐会发生 */
    function durationChange() {
        duration = this.duration
        currentTime.innerHTML = '00:00'
        durationTime.innerHTML = timeFormat(parseInt(duration))
        if (!initPlayerFlag) {
            switchVolumeOpration(0.7)
            initPlayerFlag = true
        }
    }

    /* load进度条的更新 */
    function loadProgress () {
        var buffer = audio.buffered
        if (buffer.length) {
            var loadedTime = parseInt(buffer.end(buffer.length - 1))
            var loadedPercent = (loadedTime / duration) * 100
            progressLoaded.style.width = loadedPercent.toFixed(2) + '%'
        }
    }

    /* 音频加载到可以播放 */
    function canPlayThrough () {
        console.log('audio can play')
    }

    /* 音频进度更新 */
    function timeUpdate(){
        /* 修改播放器进度条 */
        var now = audio.currentTime
        var playPercent = (now / duration) * 100
        progressPlay.style.width = playPercent.toFixed(2) + '%'
        currentTime.innerHTML = timeFormat(parseInt(now))

        if (lastCurrentTime !== -1 && !switchProgressBySelf && now < lastCurrentTime) {
            lyricMange.restArguments()
        }
        switchProgressBySelf = false
        lastCurrentTime = now

        lyricMange.updateLyricLine(now)
    }

    /* 播放结束,根据mode来决定该播放哪一首 */
    function audioEnd () {
        if (playModeFlag === 1) {
            /* 顺序播放 */
            forwardMusic()
        } else if (playModeFlag === 2) {
            /* 随机播放 */
            currentPlayIndex = _random(0, musicResourceLength - 1, currentPlayIndex)
            switchMusic.call(musicItem[currentPlayIndex])
        }
    }

    /* 切换4处imageUrl 和 audio 的src */
    function switchMusicRelative () {
        var music = options.musics[currentPlayIndex]
        var thumb = music.thumb
        var src = music.src
        /* todo src = null 的错误处理 */
        shrinkControllerIcon.src = thumb
        musicImage.src = thumb
        musicThumb.src = thumb
        bgContainer.style.backgroundImage = "url("+ thumb +")"
        audio.src = src
    }

    /* 音乐进度修改 */
    function switchProgress (event, paused) {
        var progressTime,
            finalAudioTime,
            /* 是否正常的切换，进度条直接切换为正常切换，更新MP3 Url之后修改进度为非正常切换 */
            normalSwitch = true

        if (typeof event === 'object') {
            var e = window.event || event,
                progressPrecent,
                mouseX = e.clientX
    
            if (e.pageX) mouseX = e.pageX

            progressPrecent = (mouseX - offsetDistance(this, 'offsetLeft')) / this.offsetWidth

            progressTime = (progressPrecent * duration).toFixed(3)
        } else {
            progressTime = event
            normalSwitch = false
        }

        audio.currentTime = progressTime

        finalAudioTime = lyricMange.switchProgressTime(progressTime)

        if (finalAudioTime && normalSwitch) audio.currentTime = finalAudioTime

        /* 手动切换进度 */
        switchProgressBySelf = true

        if (!paused && audio.paused) {
            audio.play()
            musicsItemSwitch()
        }
    }

    /* 调节音量 */
    function switchVolume (event) {
        var volume
        if (typeof event === 'object') {
            var e = window.event || event,
                mouseY = e.clientY

            if (e.pageY) mouseY = e.pageY

            volume = (offsetDistance(this, 'offsetTop') - mouseY) / this.offsetHeight
        } else {
            var trunFlag = this.classList.contains('fa-volume-off') ? 'on' : 'off'
            if (trunFlag === 'on') {
                volume = audioVolume
            } else {
                volume = 0.00
                audioVolume = audio.volume
            }
        }

        switchVolumeOpration(volume)
    }

    /* 调节音量操作 */
    function switchVolumeOpration (volume) {
        volumePrecent.style.height = volume * 100 + '%'

        switchVolumeIcon(volume * 100)

        audio.volume = volume.toFixed(2)
    }

    /* 根据音量修改volume的icon */
    function switchVolumeIcon (volume) {
        ['fa-volume-up','fa-volume-down','fa-volume-off'].forEach(function (item) {
            volumeIcon.classList.remove(item)
        })
        if (volume > 50) {
            volumeIcon.classList.add('fa-volume-up')
        } else if (volume > 0) {
            volumeIcon.classList.add('fa-volume-down')
        } else if (volume === 0) {
            volumeIcon.classList.add('fa-volume-off')
        }
    }

    /* 切换音乐 下一首 */
    function forwardMusic () {
        if (currentPlayIndex == (musicResourceLength - 1)) {
            currentPlayIndex = 0
        } else {
            currentPlayIndex++
        }
        switchMusic.call(musicItem[currentPlayIndex])
    }

    /* 切换音乐 上一首 */
    function backwardMusic () {
        if (currentPlayIndex == 0) {
            currentPlayIndex = musicResourceLength - 1
        } else {
            currentPlayIndex--
        }
        switchMusic.call(musicItem[currentPlayIndex])
    }

    /* 歌词dom显示隐藏的操作 */
    function showLyricFn() {
        shrinkSwitch.classList.toggle('disappear')
        musicContent.classList.toggle('blur')
        musicLyric.classList.toggle('show')
    }

    /* 定时更新音乐url */
    function reloadMusicUrl (mid, index) {
        Api.getMusicUrl(mid)
                .then(function (response) {
                    try {
                        let url = response.data[0].url
                        options.musics[index].src = url
                        if (index === currentPlayIndex) {
                            /* 切换正在播放的src 同时修改进度 */
                            let now = audio.currentTime
                            let paused = audio.paused
                            audio.src = response.data[0].url
                            switchProgress(now, paused)
                        }
                    } catch (e) {
                        /* todo show 网易云音乐暂停服务 */
                        console.log('netEase services gone')
                    }
                })
    }

    /* destory 计时器更新url */
    return function () {
        reloadMusicTimeoutArr.forEach(function (item) {
            clearTimeout(item)
        })
        reloadMusicTimeoutArr = null
    } 
}